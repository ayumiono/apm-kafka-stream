package com.gb.apm.kafka.stream.apm.common.model;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/**
 * kafka中的timewindows没有无参构造器，无法使用fastjson
 * @author xuelong.chen
 *
 */
public class TimeWindows implements Serializable{
	
	private static final long serialVersionUID = -1755332609817344044L;

	private long sizeMs;

	private long advanceMs;
	
	public TimeWindows() {}

	public TimeWindows(long sizeMs, long advanceMs) {
		this.sizeMs = sizeMs;
		this.advanceMs = advanceMs;
	}

	public Map<Long, TimeWindow> windowsFor(final long timestamp) {
		long windowStart = (Math.max(0, timestamp - sizeMs + advanceMs) / advanceMs) * advanceMs;
		final Map<Long, TimeWindow> windows = new HashMap<>();
		while (windowStart <= timestamp) {
			final TimeWindow window = new TimeWindow(windowStart, windowStart + sizeMs);
			windows.put(windowStart, window);
			windowStart += advanceMs;
		}
		return windows;
	}

	public static TimeWindows of(final long sizeMs) throws IllegalArgumentException {
		if (sizeMs <= 0) {
			throw new IllegalArgumentException("Window size (sizeMs) must be larger than zero.");
		}
		return new TimeWindows(sizeMs, sizeMs);
	}

	public TimeWindows advanceBy(final long advanceMs) {
		if (advanceMs <= 0 || advanceMs > sizeMs) {
			throw new IllegalArgumentException(String.format("AdvanceMs must lie within interval (0, %d].", sizeMs));
		}
		return new TimeWindows(sizeMs, advanceMs);
	}

	public long getSizeMs() {
		return sizeMs;
	}

	public void setSizeMs(long sizeMs) {
		this.sizeMs = sizeMs;
	}

	public long getAdvanceMs() {
		return advanceMs;
	}

	public void setAdvanceMs(long advanceMs) {
		this.advanceMs = advanceMs;
	}

	@Override
	public String toString() {
		return "TimeWindows [sizeMs=" + sizeMs + ", advanceMs=" + advanceMs + "]";
	}
}
